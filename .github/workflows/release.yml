# .github/workflows/release.yml
name: Publicar Release

# Este workflow √© executado automaticamente quando uma nova tag (ex: v1.0.0) √© criada e enviada para o reposit√≥rio.
# Ele automatiza a cria√ß√£o de releases no GitHub, extraindo as notas do CHANGELOG.md.
# Voc√™ tamb√©m pode execut√°-lo manualmente atrav√©s da aba 'Actions' no GitHub.

on:
  push:
    tags:
      - 'v*' # Executa quando uma nova tag (ex: v1.0.0) √© criada e enviada.
  workflow_dispatch: # Permite execu√ß√£o manual atrav√©s da interface do GitHub Actions

permissions:
  contents: write # Permite que o GITHUB_TOKEN crie e edite releases e outros conte√∫dos do reposit√≥rio.

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout do C√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necess√°rio para que standard-version possa analisar o hist√≥rico completo

      - name: ‚öôÔ∏è Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a vers√£o do Node.js que seu projeto utiliza

      - name: üì¶ Instalar Depend√™ncias
        run: npm install # Instala as depend√™ncias do package.json, incluindo standard-version

      - name: üõ°Ô∏è Verificar Commits para Changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "::warning::Nenhuma tag anterior encontrada. Verificando todos os commits."
            COMMITS_SINCE_LAST_TAG=$(git log --pretty=format:"%s")
          else
            echo "::debug::√öltima tag encontrada: $LAST_TAG"
            COMMITS_SINCE_LAST_TAG=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          fi

          echo "::debug::Commits desde a √∫ltima tag ou in√≠cio do hist√≥rico:"
          echo "$COMMITS_SINCE_LAST_TAG"

          # Verifica se h√° commits que geram changelog (feat, fix, refactor, ou BREAKING CHANGE)
          # Usamos grep -E para regex estendida e -q para modo silencioso (apenas status de sa√≠da)
          if echo "$COMMITS_SINCE_LAST_TAG" | grep -Eq "^(feat|fix|refactor):|BREAKING CHANGE:"; then
            echo "::notice::Commits relevantes para o changelog encontrados. Prosseguindo com a release."
          else
            echo "::error::Nenhum commit do tipo 'feat', 'fix', 'refactor' ou 'BREAKING CHANGE' encontrado desde a √∫ltima release."
            echo "::error::N√£o ser√° poss√≠vel gerar uma release com conte√∫do vazio no changelog."
            echo "::error::Por favor, adicione um commit relevante e tente novamente."
            exit 1
          fi

      - name: üìù Obter Notas de Release
        id: get_release_notes
        run: |
          # Extrai as notas de release do CHANGELOG.md para a tag atual
          VERSION_TAG=$(echo ${{ github.ref_name }} | sed 's/v//')
          RELEASE_NOTES=$(node scripts/get_release_notes.js "$VERSION_TAG")

          # Garante que as notas n√£o estejam vazias
          if [ -z "$RELEASE_NOTES" ]; then
            echo "::error::N√£o foi poss√≠vel extrair as notas de release para a vers√£o ${VERSION_TAG} do CHANGELOG.md."
            exit 1
          fi

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üöÄ Criar GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: ${{ github.ref_name }}
          body: ${{ steps.get_release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN √© fornecido automaticamente pelo GitHub
